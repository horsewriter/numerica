---
import Layout from '../layouts/Layout.astro';
---

<Layout title="Subastas Activas - Numérica">
	<div class="auctions-page">
		<div class="container">
			<div class="page-header">
				<h1 class="page-title">Subastas Activas</h1>
				<p class="page-description">
					Explora nuestra selección de maquinaria industrial disponible en subasta
				</p>
			</div>

			<div class="auctions-filters">
				<div class="filters-row">
					<div class="search-box">
						<input type="text" id="searchInput" placeholder="Buscar por nombre o descripción..." class="form-input" />
					</div>
					<div class="filter-controls">
						<select id="sortSelect" class="form-input form-select">
							<option value="price-asc">Precio: Menor a Mayor</option>
							<option value="price-desc">Precio: Mayor a Menor</option>
							<option value="name-asc">Nombre: A-Z</option>
							<option value="name-desc">Nombre: Z-A</option>
						</select>
						<button id="refreshBtn" class="btn btn-secondary btn-sm">
							<svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
								<path d="M23 4v6h-6"/>
								<path d="M1 20v-6h6"/>
								<path d="M20.49 9A9 9 0 0 0 5.64 5.64L1 10m22 4l-4.64 4.36A9 9 0 0 1 3.51 15"/>
							</svg>
							Actualizar
						</button>
					</div>
				</div>
			</div>

			<div id="auctionsGrid" class="auctions-grid">
				<div class="loading-state">
					<div class="spinner"></div>
					<p>Cargando subastas...</p>
				</div>
			</div>

			<div id="emptyState" class="empty-state" style="display: none;">
				<div class="empty-icon">
					<svg width="64" height="64" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1">
						<circle cx="11" cy="11" r="8"/>
						<path d="M21 21l-4.35-4.35"/>
					</svg>
				</div>
				<h3>No se encontraron subastas</h3>
				<p>No hay subastas activas que coincidan con tu búsqueda.</p>
			</div>

			<div id="loginPrompt" class="login-prompt" style="display: none;">
				<div class="card">
					<div class="card-body">
						<h3>Inicia sesión para participar</h3>
						<p>Necesitas una cuenta para realizar pujas en las subastas.</p>
						<div class="prompt-actions">
							<a href="/login" class="btn btn-primary">Iniciar Sesión</a>
							<a href="/register" class="btn btn-outline">Crear Cuenta</a>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>

	<!-- Bid Modal -->
	<div id="bidModal" class="modal">
		<div class="modal-backdrop" onclick="closeBidModal()"></div>
		<div class="modal-content">
			<div class="modal-header">
				<h3 id="modalTitle">Realizar Puja</h3>
				<button class="modal-close" onclick="closeBidModal()">
					<svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
						<line x1="18" y1="6" x2="6" y2="18"/>
						<line x1="6" y1="6" x2="18" y2="18"/>
					</svg>
				</button>
			</div>
			<div class="modal-body">
				<div class="current-price-display">
					<span class="price-label">Precio actual:</span>
					<span id="currentPrice" class="price-value">$0</span>
				</div>
				<form id="bidForm">
					<div class="form-group">
						<label for="bidAmount" class="form-label">Tu puja (debe ser mayor al precio actual):</label>
						<input type="number" id="bidAmount" name="bidAmount" step="0.01" required class="form-input" />
					</div>
					<button type="submit" class="btn btn-primary" style="width: 100%;" id="bidSubmitBtn">
						Realizar Puja
					</button>
				</form>
				<div id="bidMessage" class="alert" style="display: none;"></div>
			</div>
		</div>
	</div>
</Layout>

<style>
	.auctions-page {
		padding: 2rem 0 4rem;
		min-height: calc(100vh - 140px);
	}

	.page-header {
		text-align: center;
		margin-bottom: 3rem;
	}

	.page-title {
		font-size: 2.5rem;
		font-weight: 700;
		color: var(--gray-900);
		margin-bottom: 1rem;
		letter-spacing: -0.025em;
	}

	.page-description {
		font-size: 1.125rem;
		color: var(--gray-600);
		max-width: 600px;
		margin: 0 auto;
	}

	.auctions-filters {
		background: white;
		border: 1px solid var(--gray-200);
		border-radius: var(--border-radius-lg);
		padding: 1.5rem;
		margin-bottom: 2rem;
		box-shadow: var(--shadow-sm);
	}

	.filters-row {
		display: flex;
		gap: 1rem;
		align-items: center;
	}

	.search-box {
		flex: 1;
	}

	.filter-controls {
		display: flex;
		gap: 0.75rem;
		align-items: center;
	}

	.auctions-grid {
		display: grid;
		grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
		gap: 1.5rem;
	}

	.auction-card {
		background: white;
		border: 1px solid var(--gray-200);
		border-radius: var(--border-radius-lg);
		overflow: hidden;
		transition: transform 0.2s ease, box-shadow 0.2s ease;
		box-shadow: var(--shadow-sm);
	}

	.auction-card:hover {
		transform: translateY(-2px);
		box-shadow: var(--shadow-lg);
	}

	.auction-image {
		width: 100%;
		height: 200px;
		object-fit: cover;
	}

	.auction-content {
		padding: 1.5rem;
	}

	.auction-title {
		font-size: 1.25rem;
		font-weight: 600;
		color: var(--gray-900);
		margin-bottom: 0.5rem;
		line-height: 1.4;
	}

	.auction-description {
		color: var(--gray-600);
		margin-bottom: 1.5rem;
		line-height: 1.5;
		display: -webkit-box;
		-webkit-line-clamp: 2;
		-webkit-box-orient: vertical;
		overflow: hidden;
	}

	.auction-prices {
		display: grid;
		grid-template-columns: 1fr 1fr;
		gap: 1rem;
		margin-bottom: 1.5rem;
		padding: 1rem;
		background: var(--gray-50);
		border-radius: var(--border-radius);
	}

	.price-info {
		text-align: center;
	}

	.price-label {
		font-size: 0.875rem;
		color: var(--gray-500);
		margin-bottom: 0.25rem;
		display: block;
	}

	.price-value {
		font-size: 1.25rem;
		font-weight: 700;
		color: var(--primary-color);
	}

	.bid-button {
		width: 100%;
		padding: 0.75rem;
		background: var(--primary-color);
		color: white;
		border: none;
		border-radius: var(--border-radius);
		font-weight: 600;
		cursor: pointer;
		transition: background-color 0.2s ease;
	}

	.bid-button:hover:not(:disabled) {
		background: var(--primary-dark);
	}

	.bid-button:disabled {
		opacity: 0.6;
		cursor: not-allowed;
	}

	.loading-state {
		grid-column: 1 / -1;
		text-align: center;
		padding: 4rem 2rem;
	}

	.loading-state .spinner {
		width: 40px;
		height: 40px;
		margin: 0 auto 1rem;
	}

	.empty-state {
		grid-column: 1 / -1;
		text-align: center;
		padding: 4rem 2rem;
		color: var(--gray-500);
	}

	.empty-icon {
		margin-bottom: 1rem;
		opacity: 0.5;
	}

	.empty-state h3 {
		font-size: 1.25rem;
		margin-bottom: 0.5rem;
		color: var(--gray-700);
	}

	.login-prompt {
		grid-column: 1 / -1;
		display: flex;
		justify-content: center;
		padding: 2rem;
	}

	.login-prompt .card {
		max-width: 400px;
		text-align: center;
	}

	.prompt-actions {
		display: flex;
		gap: 1rem;
		margin-top: 1.5rem;
	}

	/* Modal Styles */
	.modal {
		display: none;
		position: fixed;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		z-index: 1000;
	}

	.modal-backdrop {
		position: absolute;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		background: rgba(0, 0, 0, 0.5);
		backdrop-filter: blur(4px);
	}

	.modal-content {
		position: relative;
		background: white;
		margin: 5% auto;
		border-radius: var(--border-radius-lg);
		width: 90%;
		max-width: 500px;
		box-shadow: var(--shadow-xl);
		max-height: 90vh;
		overflow-y: auto;
	}

	.modal-header {
		display: flex;
		justify-content: space-between;
		align-items: center;
		padding: 1.5rem;
		border-bottom: 1px solid var(--gray-200);
	}

	.modal-header h3 {
		font-size: 1.25rem;
		font-weight: 600;
		color: var(--gray-900);
		margin: 0;
	}

	.modal-close {
		background: none;
		border: none;
		color: var(--gray-400);
		cursor: pointer;
		padding: 0.25rem;
		border-radius: var(--border-radius);
		transition: color 0.2s ease;
	}

	.modal-close:hover {
		color: var(--gray-600);
	}

	.modal-body {
		padding: 1.5rem;
	}

	.current-price-display {
		display: flex;
		justify-content: space-between;
		align-items: center;
		background: var(--gray-50);
		padding: 1rem;
		border-radius: var(--border-radius);
		margin-bottom: 1.5rem;
	}

	.current-price-display .price-label {
		font-weight: 500;
		color: var(--gray-700);
	}

	.current-price-display .price-value {
		font-size: 1.5rem;
		font-weight: 700;
		color: var(--primary-color);
	}

	@media (max-width: 768px) {
		.filters-row {
			flex-direction: column;
			gap: 1rem;
		}

		.search-box,
		.filter-controls {
			width: 100%;
		}

		.filter-controls {
			justify-content: space-between;
		}

		.auctions-grid {
			grid-template-columns: 1fr;
		}

		.modal-content {
			margin: 2% auto;
			width: 95%;
		}

		.prompt-actions {
			flex-direction: column;
		}
	}
</style>

<script>
	let currentMachineId = null;
	let userToken = null;
	let isLoggedIn = false;
	let allMachines = [];

	// Check if user is logged in
	function checkAuth() {
		userToken = localStorage.getItem('userToken');
		isLoggedIn = !!userToken;
		return isLoggedIn;
	}

	// Load auctions
	async function loadAuctions() {
		const loadingState = document.querySelector('.loading-state');
		const emptyState = document.getElementById('emptyState');
		const grid = document.getElementById('auctionsGrid');
		
		try {
			loadingState.style.display = 'block';
			emptyState.style.display = 'none';

			const response = await fetch('/api/machines');
			const data = await response.json();

			if (data.success) {
				allMachines = data.machines;
				displayAuctions(allMachines);
			} else {
				showError('Error al cargar las subastas');
			}
		} catch (error) {
			showError('Error de conexión');
		} finally {
			loadingState.style.display = 'none';
		}
	}

	// Display auctions
	function displayAuctions(machines) {
		const grid = document.getElementById('auctionsGrid');
		const emptyState = document.getElementById('emptyState');
		
		if (machines.length === 0) {
			emptyState.style.display = 'block';
			grid.innerHTML = '';
			return;
		}

		emptyState.style.display = 'none';
		const isLoggedIn = checkAuth();

		grid.innerHTML = machines.map(machine => `
			<div class="auction-card">
				<img src="${machine.image_url || '/images/machining_center_1.jpg'}" alt="${machine.name}" class="auction-image" />
				<div class="auction-content">
					<h3 class="auction-title">${machine.name}</h3>
					<p class="auction-description">${machine.description || 'Maquinaria industrial de alta calidad para uso profesional'}</p>
					<div class="auction-prices">
						<div class="price-info">
							<span class="price-label">Precio inicial</span>
							<span class="price-value">$${parseFloat(machine.initial_price).toLocaleString()}</span>
						</div>
						<div class="price-info">
							<span class="price-label">Precio actual</span>
							<span class="price-value">$${parseFloat(machine.current_price).toLocaleString()}</span>
						</div>
					</div>
					${isLoggedIn ? 
						`<button class="bid-button" onclick="openBidModal(${machine.id}, '${machine.name}', ${machine.current_price})">
							Realizar Puja
						</button>` :
						`<button class="bid-button" onclick="showLoginPrompt()">
							Iniciar Sesión para Pujar
						</button>`
					}
				</div>
			</div>
		`).join('');
	}

	// Filter and sort functions
	function filterAndSortMachines() {
		const searchTerm = document.getElementById('searchInput').value.toLowerCase();
		const sortBy = document.getElementById('sortSelect').value;
		
		let filteredMachines = allMachines.filter(machine => 
			machine.name.toLowerCase().includes(searchTerm) ||
			(machine.description && machine.description.toLowerCase().includes(searchTerm))
		);

		// Sort machines
		filteredMachines.sort((a, b) => {
			switch (sortBy) {
				case 'price-asc':
					return parseFloat(a.current_price) - parseFloat(b.current_price);
				case 'price-desc':
					return parseFloat(b.current_price) - parseFloat(a.current_price);
				case 'name-asc':
					return a.name.localeCompare(b.name);
				case 'name-desc':
					return b.name.localeCompare(a.name);
				default:
					return 0;
			}
		});

		displayAuctions(filteredMachines);
	}

	// Show login prompt
	function showLoginPrompt() {
		document.getElementById('loginPrompt').style.display = 'block';
		document.getElementById('auctionsGrid').style.display = 'none';
	}

	// Open bid modal
	function openBidModal(machineId, machineName, currentPrice) {
		currentMachineId = machineId;
		document.getElementById('modalTitle').textContent = `Pujar por ${machineName}`;
		document.getElementById('currentPrice').textContent = `$${parseFloat(currentPrice).toLocaleString()}`;
		document.getElementById('bidAmount').min = parseFloat(currentPrice) + 0.01;
		document.getElementById('bidAmount').value = '';
		document.getElementById('bidModal').style.display = 'block';
		document.body.style.overflow = 'hidden';
	}

	// Close bid modal
	function closeBidModal() {
		document.getElementById('bidModal').style.display = 'none';
		document.body.style.overflow = 'auto';
		currentMachineId = null;
		
		// Clear any messages
		const messageDiv = document.getElementById('bidMessage');
		messageDiv.style.display = 'none';
	}

	// Handle bid form submission
	document.getElementById('bidForm').addEventListener('submit', async (e) => {
		e.preventDefault();
		
		const submitBtn = document.getElementById('bidSubmitBtn');
		const messageDiv = document.getElementById('bidMessage');
		const bidAmount = parseFloat(document.getElementById('bidAmount').value);

		submitBtn.disabled = true;
		submitBtn.textContent = 'Realizando puja...';

		try {
			const response = await fetch('/api/bids', {
				method: 'POST',
				headers: {
					'Content-Type': 'application/json',
					'Authorization': `Bearer ${userToken}`
				},
				body: JSON.stringify({
					machine_id: currentMachineId,
					amount: bidAmount
				}),
			});

			const data = await response.json();

			if (data.success) {
				showBidMessage('¡Puja realizada exitosamente!', 'success');
				setTimeout(() => {
					closeBidModal();
					loadAuctions(); // Reload to show updated prices
				}, 2000);
			} else {
				showBidMessage(data.error || 'Error al realizar la puja', 'error');
			}
		} catch (error) {
			showBidMessage('Error de conexión. Intenta nuevamente.', 'error');
		} finally {
			submitBtn.disabled = false;
			submitBtn.textContent = 'Realizar Puja';
		}
	});

	function showBidMessage(text, type) {
		const messageDiv = document.getElementById('bidMessage');
		messageDiv.textContent = text;
		messageDiv.className = `alert alert-${type}`;
		messageDiv.style.display = 'block';
	}

	function showError(message) {
		const grid = document.getElementById('auctionsGrid');
		grid.innerHTML = `
			<div class="loading-state">
				<p style="color: var(--error-color);">${message}</p>
			</div>
		`;
	}

	// Event listeners
	document.getElementById('searchInput').addEventListener('input', filterAndSortMachines);
	document.getElementById('sortSelect').addEventListener('change', filterAndSortMachines);
	document.getElementById('refreshBtn').addEventListener('click', loadAuctions);

	// Make functions global
	window.openBidModal = openBidModal;
	window.closeBidModal = closeBidModal;
	window.showLoginPrompt = showLoginPrompt;

	// Load auctions on page load
	document.addEventListener('DOMContentLoaded', loadAuctions);

	// Auto-refresh auctions every 30 seconds
	setInterval(loadAuctions, 30000);
</script>